---
import { getI18N } from '@i18n/index'
const i18n = getI18N(Astro.currentLocale)
---

<section class="max-w-[90%] md:max-w-[1100px] pb-[108px] mx-auto" id="talk-to-me-section">
  <h2 class="text-black dark:text-white font-['Geist Bold'] font-extrabold text-4xl md:text-6xl text-center mb-6 md:mb-16">{i18n['TALK-TO-ME'].TITLE}</h2>

  <div class="flex gap-6 md:gap-12 flex-col md:flex-row">
    <div class="w-full flex flex-col justify-between">
      {
        i18n['TALK-TO-ME'].TEXT.map((text) => (
          <p class="text-secondary-light-text dark:text-secondary-dark-text mb-3 text-sm md:text-xl text-pretty">
            {text}
          </p>
        ))
      }
    </div>

    <div class="w-full relative p-[1px] rounded-[25px] overflow-hidden">
      <span id="light" class="-z-10" />

      <form class="flex flex-col gap-4 w-full p-5 md:p-8 border bg-white dark:bg-black border-outline-light dark:border-outline-dark rounded-[24px]" id="talk-form" action="https://formspree.io/f/mvoekpzk" method="POST">
        <div class="flex flex-col">
          <label class="text-xs text-secondary-light-text dark:text-secondary-dark-text mb-1" for="email">
            {i18n['TALK-TO-ME']['INPUT-EMAIL']}
          </label>
          <input required class="h-[40px] rounded-md bg-semi-white dark:bg-semi-black border border-outline-light dark:border-outline-dark outline-none text-secondary-dark-text px-3" type="email" id="email" name="email">
        </div>

        <div class="flex flex-col">
          <label class="text-xs text-secondary-light-text dark:text-secondary-dark-text mb-1" for="message">
            {i18n['TALK-TO-ME']['INPUT-MESSAGE']}
          </label>
          <textarea required class="max-h-[217px] min-h-[217px] rounded-md bg-semi-white dark:bg-semi-black border border-outline-light dark:border-outline-dark outline-none text-secondary-dark-text p-3" name="message" id="message" cols="30" rows="10"></textarea>
        </div>

        <button class="shadow-sm h-[40px] w-full md:w-fit rounded-md bg-semi-white dark:bg-semi-black border border-dashed border-outline-light dark:border-outline-dark outline-none text-secondary-light-text dark:text-secondary-dark-text px-10 hover:bg-hover-light hover:dark:bg-hover-dark duration-300 flex gap-3 items-center disabled:cursor-not-allowed" type="submit" id="submit-btn">
          {i18n['TALK-TO-ME']['SEND-BTN']}

          <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-loader-2 animate-spin stroke-white hidden" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" id="spin"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 20.777a8.942 8.942 0 0 1 -2.48 -.969" /><path d="M14 3.223a9.003 9.003 0 0 1 0 17.554" /><path d="M4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" /><path d="M3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" /><path d="M6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" /></svg>

          <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-check stroke-green-500 hidden" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" id="success"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>

          <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-x stroke-[#CD2F2F] hidden" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" id="error"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M18 6l-12 12" /><path d="M6 6l12 12" /></svg>
        </button>
      </form>
    </div>
  </div>
</section>

<style>
  #light {
    display: inline-block;
    width: 550px;
    height: 550px;
    position: absolute;
    background: radial-gradient(circle, rgba(255,0,255,1) 0%, rgba(252,70,107,0) 70%);
  }
</style>

<!-- send form -->
<script>
  const form = document.querySelector('#talk-form')
  const btn = document.querySelector('#submit-btn')
  const spin = document.querySelector('#spin')

  form.addEventListener('submit', handlerSubmit)

  async function handlerSubmit (e) {
    e.preventDefault()
    btn.setAttribute('disabled', 'true')
    spin.classList.remove('hidden')


    const formData = new FormData(this)
    const response = await fetch(e.target.action, {
      method: form.method,
      body: formData,
      headers: {
          'Accept': 'application/json'
      }
    })

    spin.classList.add('hidden')
    btn.removeAttribute('disabled')

    if (response.ok) {
      form.reset()
      const success = document.querySelector('#success')
      success.classList.remove('hidden')
      setTimeout(() => {success.classList.add('hidden')}, 3000)

    } else {
      const error = document.querySelector('#error')
      error.classList.remove('hidden')
      setTimeout(() => {error.classList.add('hidden')}, 3000)
    }


    btn.removeAttribute('disabled')
  }
</script>

<!-- line effect -->
<script>
  document.querySelector('body').addEventListener("mousemove", move)
  const light = document.getElementById("light");

  function move (e) {

    let auxX
    if (e.clientX <= document.body.clientWidth / 2) auxX = 0
    else auxX = (e.clientX - document.body.clientWidth / 2) * 2

    const x = (auxX * 100) / window.innerWidth - 35
    const y = (e.clientY * 100) / window.innerHeight - 35

    light.style.left = `${x}%`
    light.style.top = `${y}%`
  }

</script>